const map = new Map();
map.set('sndlast', {
	title: 'sndlast',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό Ν > 10 και να εκτυπώνει το προτελευταίο ψηφίο του.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος φυσικός αριθμός και ότι 10 < Ν < 100.000.000.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς ένα ψηφίο: την απάντησή σας.',
	input: '9923',
	output: '2',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=27',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '0',
});
map.set('mult67', {
	title: 'mult67',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό Ν και να ελέγχει αν είναι πολλαπλάσιο του 7 αλλά όχι πολλαπλάσιο του 6.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος φυσικός αριθμός. ',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "yes", αν ο αριθμός είναι πολλαπλάσιο του 7 αλλά όχι πολλαπλάσιο του 6, διαφορετικά "no". ',
	input: ['700', '42'],
	output: ['yes', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=29',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('threedig', {
	title: 'threedig',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό Ν και να ελέγχει αν είναι ή όχι τριψήφιος.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος φυσικός αριθμός.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "yes", αν ο αριθμός είναι τριψήφιος, διαφορετικά "no".',
	input: ['789', '5934'],
	output: ['yes', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=28',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('end24', {
	title: 'end24',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα θετικό φυσικό αριθμό Ν και να ελέγχει αν το τετράγωνό του τελειώνει σε 24 (γραμμένο στο δεκαδικό σύστημα αρίθμησης).',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος θετικός φυσικός αριθμός και ότι το τετράγωνό του θα μπορεί να αναπαρασταθεί από τον τύπο integer της Pascal. ',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "yes", αν το τετράγωνο του Ν (γραμμένο στο δεκαδικό σύστημα αρίθμησης) τελειώνει σε 24, διαφορετικά "no". ',
	input: ['82', '37'],
	output: ['yes', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=30',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '3',
});
map.set('maxfact', {
	title: 'maxfact',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό Ν > 0 και να εκτυπώνει το μέγιστο φυσικό αριθμό του οποίου το παραγοντικό δεν υπερβαίνει το Ν.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος φυσικός αριθμός και ότι 0 < Ν < 2.000.000.000. ',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς έναν φυσικό αριθμό: την απάντησή σας. ',
	input: '10',
	output: '3',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=31',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '0',
});
map.set('cntprim', {
	title: 'cntprim',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό Ν και να εκτυπώνει το πλήθος των πρώτων αριθμών που δεν υπερβαίνουν το N.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος φυσικός αριθμός και ότι Ν <= 5.000.000. ',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς έναν φυσικό αριθμό: την απάντησή σας. ',
	input: '29',
	output: '10',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=32',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('cntdivs', {
	title: 'cntdivs',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό Ν και να εκτυπώνει το πλήθος των θετικών φυσικών αριθμών που δεν υπερβαίνουν το Ν και έχουν μη τετριμμένους κοινούς διαιρέτες με το Ν. (Οι μη τετριμμένοι διαιρέτες είναι μεγαλύτεροι του 1.)',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος φυσικός αριθμός και ότι Ν <= 3.000.000.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς έναν φυσικό αριθμό: την απάντησή σας. ',
	input: '10',
	output: '6',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=33',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});
map.set('sumofpow', {
	title: 'sumofpow',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό Ν και να εκτυπώνει το πλήθος των φυσικών αριθμών που δεν υπερβαίνουν το Ν και μπορούν να γραφούν ως άθροισμα μιας δύναμης του 2, μιας δύναμης του 3 και μιας δύναμης του 5 (π.χ. 42 = 16 + 1 + 25 = 2^4 + 3^0 + 5^2).',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι το Ν θα είναι έγκυρος φυσικός αριθμός και ότι Ν <= 5.000.000.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς έναν φυσικό αριθμό: την απάντησή σας. ',
	input: '10',
	output: '8',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=34',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '3',
});
map.set('greater', {
	title: 'greater',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει δύο φυσικούς αριθμούς και να εκτυπώνει τον μεγαλύτερο.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους αριθμούς Μ και Ν, χωρισμένους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι τα Μ και Ν θα είναι έγκυροι φυσικοί αριθμοί.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς έναν αριθμό: τον μεγαλύτερο των Μ και Ν.',
	input: ['99 23', '0 42', '16 16'],
	output: ['99', '42', '16'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=37',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('swaps', {
	title: 'swaps',
	description: 'Δίνεται μία ακολουθία αποτελούμενη από Ν ακέραιους αριθμούς, διάφορους του μηδέν. Ξεκινάμε να παίζουμε το εξής παιχνίδι: Σε κάθε βήμα του παιχνιδιού, βρίσκουμε όλα τα ζεύγη γειτονικών αριθμών της ακολουθίας, για τα οποία ο αριστερός αριθμός είναι θετικός και ο δεξιός αριθμός είναι αρνητικός. Για κάθε ένα τέτοιο ζεύγος, αντιμεταθέτουμε τους δύο αριθμούς. Στη συνέχεια προχωρούμε στο επόμενο βήμα. Επαναλαμβάνουμε με όσα βήματα χρειαστούν, μέχρι που να μην μπορούν να γίνουν άλλες αντιμεταθέσεις.\nΓράψτε ένα πρόγραμμα που να υπολογίζει: πόσες αντιμεταθέσεις θα γίνουν σε όλη τη διάρκεια του παιχνιδιού, ποιος θα είναι ο πρώτος και ποιος ο τελευταίος αριθμός της ακολουθίας μετά το τελευταίο βήμα.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος των στοιχείων της ακολουθίας Ν. Η δεύτερη γραμμή της εισόδου θα περιέχει τους Ν ακέραιους αριθμούς της ακολουθίας, χωρισμένους με κενά διαστήματα. Θεωρήστε δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι 2 ≤ Ν ≤ 100.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από τρεις γραμμές, κάθε μία από τις οποίες θα περιέχει ακριβώς έναν ακέραιο αριθμό. Η πρώτη γραμμή θα περιέχει το πλήθος των αντιμεταθέσεων, ενώ η δεύτερη και η τρίτη θα περιέχουν αντίστοιχα τον πρώτο και τον τελευταίο αριθμό της ακολουθίας μετά το τελευταίο βήμα.',
	input: '7\n10 -9 -4 5 -2 3 8',
	output: '4\n-9\n8',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=38',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('even', {
	title: 'even',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει δύο φυσικούς αριθμούς και να εκτυπώνει πόσοι από αυτούς είναι άρτιοι.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους αριθμούς Μ και Ν, χωρισμένους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι τα Μ και Ν θα είναι έγκυροι φυσικοί αριθμοί.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς ένα φυσικό αριθμό μεταξύ 0 και 2 (συμπεριλαμβανομένων).',
	input: ['99 23', '24 98'],
	output: ['1', '2'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=39',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('citycirc', {
	title: 'citycirc',
	description: 'Δίνονται N πόλεις, αριθμημένες από 1 μέχρι Ν (συμπεριλαμβανομένων) και διατεταγμένες κατά μήκος μιας κυκλικής διαδρομής (η επόμενη της πόλης k στην κυκλική διαδρομή είναι η πόλη k+1, όταν k < Ν, και η πόλη 1, όταν k = Ν). Ένας κρατικός υπάλληλος πρόκειται να επισκεφθεί όλες τις πόλεις με τη σειρά που προαναφέρθηκε και να διευθετήσει τις φορολογικές εκκρεμότητες των πολιτών απέναντι στο κράτος (καταβολή φόρου) και του κράτους απέναντι στους πολίτες (επιστροφή φόρου) σε κάθε πόλη. Για κάθε πόλη k (όπου 1 ≤ k ≤ Ν) δίνεται ένας ακέραιος b_k που ισούται με το άθροισμα των φορολογικών εκκρεμοτήτων των κατοίκων της πόλης k (ο αριθμός αυτός μπορεί να είναι θετικός, αρνητικός, ή 0). Έτσι αν το b_k είναι θετικό, ο υπάλληλος φεύγει από την πόλη k με b_k ευρώ περισσότερα απ’ όσα είχε όταν ήρθε, αν το b_k είναι αρνητικό, ο υπάλληλος φεύγει από την πόλη k με |b_k| ευρώ λιγότερα, και αν το b_k είναι 0, ο υπάλληλος φεύγει από την πόλη k με το ίδιο διαθέσιμο ποσό. Ο υπάλληλος δεν μπορεί να συνεχίσει την περιοδεία του αν εμφανίζεται ότι διαθέτει αρνητικό ποσό μετά την επίσκεψή του σε κάποια πόλη, αφού αυτό δηλώνει αδυναμία εκπλήρωσης κάποιων υποχρεώσεων επιστροφής φόρου στην πόλη.\nΓράψτε ένα πρόγραμμα που να βρίσκει την πρώτη πόλη (δηλαδή αυτή με τον μικρότερο αριθμό), από την οποία αν ξεκινήσει ο κρατικός υπάλληλος την περιοδεία του με μηδέν ευρώ, θα μπορέσει να την ολοκληρώσει.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος των πόλεων Ν. Η δεύτερη γραμμή της εισόδου θα περιέχει τους Ν ακέραιους αριθμούς b_1, b_2, ..., b_Ν, χωρισμένους με κενά διαστήματα. Θεωρήσετε δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι 2 ≤ Ν ≤ 1.000.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία μόνο γραμμή που να περιέχει ακριβώς έναν φυσικό αριθμό: τον αριθμό της πρώτης πόλης από την οποία αν ξεκινήσει ο κρατικός υπάλληλος την περιοδεία του με μηδέν ευρώ, μπορεί να την ολοκληρώσει. Αν δεν υπάρχει τέτοια πόλη, ο αριθμός στην έξοδο πρέπει να είναι 0.',
	input: ['6\n-50 20 15 30 0 -5', '8\n35 10 -55 -40 30 -70 60 30', '6\n-50 20 -15 30 18 -5'],
	output: ['2', '7', '0'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=40',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});
map.set('sum42', {
	title: 'sum42',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει δύο φυσικούς αριθμούς και να ελέγχει αν το άθροισμά τους τελειώνει σε 42 (γραμμένο στο δεκαδικό σύστημα αρίθμησης).',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους αριθμούς Μ και Ν, χωρισμένους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι τα Μ και Ν θα είναι έγκυροι φυσικοί αριθμοί.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "yes", αν το άθροισμα των Μ και Ν (γραμμένο στο δεκαδικό σύστημα αρίθμησης) τελειώνει σε 42, διαφορετικά "no".',
	input: ['99 23', '99 43'],
	output: ['no', 'yes'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=41',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '3',
});
map.set('sumx', {
	title: 'sumx',
	description: 'Δίνεται μια ακολουθία n διαφορετικών μεταξύ τους θετικών ακεραίων a_1, a_2, ..., a_n, με τιμές μεταξύ 1 και 1.000.000. Δίνεται επίσης ένας ακέραιος x. Γράψτε ένα πρόγραμμα που να βρίσκει το πλήθος των ζευγών (a_i, a_j), όπου 1 ≤ i < j ≤ n και a_i + a_j = x.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει τους αριθμούς n και x, χωρισμένους με ένα κενό διάστημα. Η δεύτερη γραμμή της εισόδου θα περιέχει τους n ακέραιους αριθμούς a_i της ακολουθίας, χωρισμένους με κενά διαστήματα. Θεωρήστε δεδομένο ότι η είσοδος θα είναι έγκυρη, 1 ≤ n ≤ 100.000, 1 ≤ a_i ≤ 1.000.000, και 1 ≤ x ≤ 2.000.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό: το ζητούμενο πλήθος των ζευγών.',
	input: '9 13\n5 12 7 10 9 1 2 3 11',
	output: '3',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=42',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '3',
});
map.set('divprev', {
	title: 'divprev',
	description: 'Δίνεται μία ακολουθία αποτελούμενη από Ν θετικούς ακέραιους αριθμούς. Ζητείται να βρεθεί ο μικρότερος αριθμός της ακολουθίας, ο οποίος διαιρεί άκριβώς όλους τους αριθμούς που προηγούνται αυτού στην ακολουθία.\nΠροφανώς ο αριθμός που εμφανίζεται πρώτος στην ακολουθία διαιρεί ακριβώς όλους τους προηγούμενούς του (γιατί δεν έχει κανέναν προηγούμενο). Άρα, αν η ακολουθία δεν είναι κενή, υπάρχει πάντα λύση στο πρόβλημα.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος των στοιχείων της ακολουθίας Ν. Η δεύτερη γραμμή της εισόδου θα περιέχει τους Ν ακέραιους αριθμούς της ακολουθίας, χωρισμένους με κενά διαστήματα. Θεωρήστε δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι 1 ≤ Ν ≤ 3.000.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό: το μικρότερο αριθμό της ακολουθίας που διαιρεί ακριβώς όλους τους προηγούμενούς του.',
	input: '10\n210 84 126 462 42 51 7 77 2 3',
	output: '42',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=54',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('oddeven', {
	title: 'oddeven',
	description: 'Δίνεται ακολουθία a_1, ..., a_N αποτελούμενη από N θετικούς ακέραιους αριθμούς. Ζητείται να υπολογισθεί το εύρος του μεγαλύτερου διαστήματος στην ακολουθία στο οποίο το πλήθος των άρτιων είναι ίσο με το πλήθος των περιττών.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος των στοιχείων της ακολουθίας Ν. Η δεύτερη γραμμή της εισόδου θα περιέχει τους Ν θετικούς ακέραιους αριθμούς της ακολουθίας, χωρισμένους με κενά διαστήματα. Να θεωρήσετε δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι 2 <= Ν <= 1.000.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό, το εύρος του μεγαλύτερου διαστήματος στην ακολουθία στο οποίο το πλήθος των άρτιων είναι ίσο με το πλήθος των περιττών. Σε περίπτωση που δεν υπάρχει τέτοιο διάστημα, η έξοδος πρέπει να είναι 0.',
	input: ['5\n7 8 9 6 5', '10\n1 2 1 2 1 2 2 1 1 1', '10\n4 6 8 2 2 6 8 4 2 8'],
	output: ['4', '8', '0'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=56',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '3',
});
map.set('eqfst', {
	title: 'eqfst',
	description: 'Να γράψετε ένα πρόγραμμα που να υπολογίζει τη λύση της πρωτοβάθμιας εξίσωσης a*x+b=0.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους πραγματικούς αριθμούς a και b, χωρισμένους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι τα a και b θα είναι έγκυροι πραγματικοί αριθμοί.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει τα εξής:\n>τη λύση της εξίσωσης, αν υπάρχει, με ακρίβεια 6 δεκαδικών ψηφίων (writeln με :0:6).\n>τη λέξη "impossible", αν η εξίσωση είναι αδύνατη.\n>τη λέξη "trivial", αν η εξίσωση είναι αόριστη.',
	input: ['3 2', '0 -1', '0 0'],
	output: ['-0.666667', 'impossible', 'trivial'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=57',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('modeq', {
	title: 'modeq',
	description: 'Να γράψετε ένα πρόγραμμα που να δέχεται τρεις φυσικούς αριθμούς και να ελέγχει αν το υπόλοιπο της διαίρεσής τους με το 42 είναι ίσο.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους τρεις φυσικούς αριθμούς, χωρισμένους ανά δύο με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι οι αριθμοί θα είναι έγκυροι.',
	outputDescription: 'Μόνο μία γραμμή:\n>Αν το υπόλοιπο της διαίρεσης των αριθμών με το 42 είναι ίσο, η γραμμή θα περιέχει μόνο έναν ακέραιο: αυτό το υπόλοιπο.\n>Διαφορετικά, η γραμμή θα περιέχει τη λέξη "no".',
	input: ['45 87 129', '42 42 84', '41 42 43'],
	output: ['3', '0', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=60',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '3',
});
map.set('intvsum', {
	title: 'intvsum',
	description: 'Δίνεται ακολουθία a_1, ..., a_N αποτελούμενη από N θετικούς ακέραιους αριθμούς. Ζητείται να διαπιστωθεί αν υπάρχουν θέσεις i, j, με i < j, τέτοιες ώστε a_i + a_j = a_{i+1} + ... + a_{j-1}, δηλαδή το άθροισμα των αριθμών στις θέσεις i και j της ακολουθίας να ισούται με το άθροισμα των αριθμών στις θέσεις από i+1 μέχρι και j-1. Αν υπάρχουν πολλά τέτοια ζεύγη θέσεων i, j στην ακολουθία, ζητείται να υπολογισθεί η μέγιστη θέση j για την οποία ισχύει η παραπάνω σχέση.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος των στοιχείων της ακολουθίας Ν. Η δεύτερη γραμμή της εισόδου θα περιέχει τους Ν θετικούς ακέραιους αριθμούς της ακολουθίας, χωρισμένους με κενά διαστήματα. Να θεωρήσετε δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι 3 <= Ν <= 100.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό j, 3 <= j <= N, που αντιστοιχεί στη μέγιστη θέση της ακολουθίας για την οποία υπάρχει θέση i, i < j, έτσι ώστε a_i + a_j = a_{i+1} + ... + a_{j-1}. Αν δεν υπάρχει τέτοια θέση, η έξοδος πρέπει να είναι 0.',
	input: ['10\n78 14 8 1 2 32 16 45 47 64', '10\n3 6 1 2 5 1 4 7 14 8', '10\n256 128 64 32 16 32 64 128 256 512'],
	output: ['8', '9', '0'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=58',
	constraints: '⏱️: 1s',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});
map.set('smthree', {
	title: 'smthree',
	description: 'Να γράψετε ένα πρόγραμμα που να υπολογίζει τον μικρότερο μεταξύ τριών ακέραιων αριθμών.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους τρεις ακέραιους αριθμούς, χωρισμένους ανά δύο με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι οι αριθμοί θα είναι έγκυροι.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει τον μικρότερο από τους τρεις.',
	input: ['2 1 3', '4 2 2', '7 7 7'],
	output: ['1', '2', '7'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=59',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('lowsum', {
	title: 'lowsum',
	description: 'Δίνεται μια ακολουθία N διαφορετικών ακεραίων (αρνητικών και θετικών) σε αύξουσα σειρά. Να γράψετε ένα πρόγραμμα το οποίο θα βρίσκει δύο διαφορετικούς αριθμούς της ακολουθίας που το άθροισμά τους είναι όσο το δυνατόν πιο κοντά στο 0.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος των στοιχείων της ακολουθίας Ν. Η δεύτερη γραμμή της εισόδου θα περιέχει Ν διαφορετικούς ακέραιους αριθμούς (αρνητικούς και θετικούς) σε αύξουσα σειρά. Οι αριθμοί θα χωρίζονται με κενά διαστήματα, και μπορεί να είναι και όλοι θετικοί ή όλοι αρνητικοί. Η ακολουθία δεν θα περιέχει το 0, η απόλυτη τιμή των αριθμών θα είναι μικρότερη ή ίση του 10^9, και θα ισχύει ότι 2 <= Ν <= 1.000.000.\nΝα θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που περιέχει ακριβώς έναν ακέραιο αριθμό, ο οποίος αντιστοιχεί στο άθροισμα δύο διαφορετικών αριθμών της ακολουθίας που είναι πλησιέστερα στο 0.',
	input: ['5\n-101 -4 -1 6 95', '8\n-110 -22 -1 28 35 105 140 145'],
	output: ['2', '-5'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=71',
	constraints: '⏱️: 1s 💻: 64MB',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('count7', {
	title: 'count7',
	description: 'Να γράψετε ένα πρόγραμμα που να δέχεται ένα διψήφιο φυσικό αριθμό και να βρίσκει πόσα από τα ψηφία του είναι ίσα με 7.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει το διψήφιο φυσικό αριθμό.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει ακριβώς ένα φυσικό αριθμό μεταξύ 0 και 2 (συμπεριλαμβανομένων).',
	input: ['17', '42', '77'],
	output: ['1', '0', '2'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=72',
	constraints: '⏱️: 1s 💻: 16MB',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('maxsum', {
	title: 'maxsum',
	description: 'Δίνεται μια ακολουθία N ακεραίων αριθμών (που μπορεί να είναι αρνητικοί, θετικοί ή και μηδέν). Να γράψετε ένα πρόγραμμα το οποίο θα υπολογίζει το μέγιστο άθροισμα (οσωνδήποτε) διαδοχικών όρων της ακολουθίας.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος N των στοιχείων της ακολουθίας. Η δεύτερη γραμμή της εισόδου θα περιέχει Ν ακέραιους αριθμούς. Οι αριθμοί θα χωρίζονται με κενά διαστήματα, και η απόλυτη τιμή τους θα είναι μικρότερη ή ίση του 1000.\nΝα θεωρήσετε ως δεδομένο ότι 2 <= Ν <= 1.000.000, και ότι η είσοδος θα είναι έγκυρη.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό, ο οποίος αντιστοιχεί στο μέγιστο άθροισμα διαδοχικών όρων της ακολουθίας.',
	input: ['10\n1 5 -1 -6 14 -8 7 2 -5 4', '10\n1 7 -10 -11 9 9 -7 2 12 -4'],
	output: ['15', '25'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=73',
	constraints: '⏱️: 1s 💻: 64MB',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});
map.set('mul4dig', {
	title: 'mul4dig',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει δύο φυσικούς αριθμούς και να ελέγχει αν το γινόμενό τους είναι ή όχι τετραψήφιος αριθμός.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους αριθμούς Μ και Ν, χωρισμένους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι τα Μ και Ν θα είναι έγκυροι φυσικοί αριθμοί.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "yes", αν το γινόμενο των Μ και Ν είναι τετραψήφιος αριθμός, διαφορετικά "no".',
	input: ['6 7', '85 47', '812 67'],
	output: ['no', 'yes', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=74',
	constraints: '⏱️: 1s 💻: 16MB',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('skating', {
	title: 'skating',
	description: 'Ο μικρός Λουκάς παίζει με το πατίνι του. Κουράζεται όμως εύκολα κι έτσι βασίζεται αποκλειστικά στην κλίση του δρόμου. Έστω ότι ο δρόμος όπου κάνει πατίνι ο Λουκάς χωρίζεται σε Ν μικρά τμήματα και ότι η κλίση καθενός από αυτά παριστάνεται με έναν ακέραιο αριθμό. Αν, για παράδειγμα, ο αριθμός που αντιστοιχεί σε κάποιο τμήμα είναι 3, τότε το τμήμα αυτό είναι κατηφορικό και η ταχύτητα του πατινιού θα αυξηθεί κατά 3 όταν περάσει από εκεί. Αντίθετα, αν ο αριθμός είναι -4, τότε το τμήμα αυτό είναι ανηφορικό και η ταχύτητα του πατινιού θα μειωθεί κατά 4 όταν περάσει από εκεί. Τα επίπεδα τμήματα παριστάνονται με μηδέν.\nΟ Λουκάς μπορεί να διαλέξει από ποιο σημείο του δρόμου θα ξεκινήσει με το πατίνι του. Η αρχική του ταχύτητα είναι μηδενική και θέλει να φτάσει στο τέλος του δρόμου με τη μέγιστη δυνατή ταχύτητα.\nΝα γράψετε ένα πρόγραμμα το οποίο θα βρίσκει τη μέγιστη δυνατή ταχύτητα στο τέλος του δρόμου.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος N των τμημάτων του δρόμου. Η δεύτερη γραμμή της εισόδου θα περιέχει Ν ακέραιους αριθμούς. Οι αριθμοί θα χωρίζονται με κενά διαστήματα, και η απόλυτη τιμή τους θα είναι μικρότερη ή ίση του 1000.\nΝα θεωρήσετε ως δεδομένο ότι 2 <= Ν <= 1.000.000, και ότι η είσοδος θα είναι έγκυρη.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό: τη μέγιστη ταχύτητα με την οποία μπορεί να φτάσει ο Λουκάς στο τέλος του δρόμου.',
	input: ['8\n-1 3 -4 5 -1 4 0 -2', '10\n5 -6 7 -8 14 12 -11 9 -5 4', '5\n1 2 1 2 -10'],
	output: ['6', '23', '0'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=75',
	constraints: '⏱️: 1s 💻: 16MB',
	difficulty: 'Δύσκολο',
	difficultyGrade: '3',
});
map.set('mundial', {
	title: 'mundial',
	description: 'Το παγκόσμιο πρωτάθλημα ποδοσφαίρου (μουντιάλ) διεξήχθη για πρώτη φορά το 1930. Από τότε, διοργανώνεται κάθε 4 χρόνια. Όμως, το 1942 και το 1946 δεν έγινε, λόγω του πολέμου.\nΝα γράψετε ένα πρόγραμμα που να διαβάζει ένα έτος και να ελέγχει αν είναι ή όχι χρονιά μουντιάλ.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει έναν αριθμό Y: τό έτος που μας ενδιαφέρει.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "yes", αν το έτος Y έγινε ή πρόκειται να γίνει παγκόσμιο πρωτάθλημα ποδοσφαίρου, διαφορετικά "no".',
	input: ['1970', '1942', '2012'],
	output: ['yes', 'no', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=76',
	constraints: '⏱️: 1s 💻: 16MB',
	difficulty: 'Εύκολο',
	difficultyGrade: '3',
});
map.set('istriangle', {
	title: 'istriangle',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει τρεις πραγματικούς αριθμούς X, Y και Z και να ελέγχει αν οι αριθμοί αυτοί μπορούν να είναι τα μήκη των πλευρών ενός τριγώνου στο επίπεδο.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους αριθμούς X, Y και Z, χωρισμένους ανά δύο με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι θα είναι έγκυροι πραγματικοί αριθμοί.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "yes", αν οι αριθμοί X, Y και Z μπορούν να είναι τα μήκη των πλευρών ενός τριγώνου στο επίπεδο, διαφορετικά "no".',
	input: ['3 10.5 8', '9.5 8 21.3', '17 8 9'],
	output: ['yes', 'no', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=85',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('twoends', {
	title: 'twoends',
	description: 'Δίνεται μια ακολουθία N θετικών ακεραίων αριθμών. Ζητείται ο μεγαλύτερος δυνατός αριθμός Σ, τέτοιος ώστε:\n>Να υπάρχουν Χ όροι στην αρχή της ακολουθίας που να έχουν άθροισμα Σ.\n>Να υπάρχουν Y όροι στο τέλος της ακολουθίας που να έχουν άθροισμα Σ.\n>Να είναι Χ+Υ <= Ν, δηλαδή οι όροι που αθροίζουμε στα δύο άκρα να μην επικαλύπτονται.\nΠροσέξτε ότι το πρόβλημα έχει πάντα λύση (για Σ=0 και Χ=Υ=0).',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος N των στοιχείων της ακολουθίας. Η δεύτερη γραμμή της εισόδου θα περιέχει Ν ακέραιους αριθμούς, χωρισμένους ανά δύο με ένα κενό διάστημα.\nΝα θεωρήσετε ως δεδομένο ότι 1 <= Ν <= 10.000.000, ότι η είσοδος θα είναι έγκυρη και ότι το άθροισμα όλων των αριθμών δε θα υπερβαίνει το 1.000.000.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό, το μεγαλύτερο δυνατό Σ με τις παραπάνω ιδιότητες.',
	input: ['7\n3 2 5 7 1 6 4', '10\n1 2 3 4 5 6 7 8 9 45', '5\n1 2 3 4 5'],
	output: ['10', '45', '0'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=86',
	constraints: '⏱️: 3s 💻: 128MB',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('circdisc', {
	title: 'circdisc',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει δύο πραγματικούς αριθμούς X και Y και να απαντά πού βρίσκεται το σημείο με συντεταγμένες (X, Y) σε σχέση με το μοναδιαίο κυκλικό δίσκο.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τις συντεταγμένες X και Y, χωρισμένες με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι θα είναι έγκυροι πραγματικοί αριθμοί.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει "inside", αν το σημείο με συντεταγμένες (X, Y) βρίσκεται στο εσωτερικό του μοναδιαίου κύκλου, "outside" αν βρίσκεται στο εξωτερικό του, και "border" αν βρίσκεται πάνω στον κύκλο.',
	input: ['0.5 0.5', '-1 0', '2 -3.5'],
	output: ['inside', 'border', 'outside'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=89',
	constraints: '⏱️: 1s',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('icecream', {
	title: 'icecream',
	description: 'Κατά μήκος μιας ευθείας οδού κατοικούν N παιδιά. Το κάθε παιδί i κατοικεί σε μια διαφορετική ακέραια συντεταγμένη a_i επί της οδού. Πλησιάζει το καλοκαίρι, και ο παγωτατζής της γειτονιάς σκέφτεται σε ποιο σημείο της οδού θα εγκαταστήσει το κιόσκι του. Ο παγωτατζής γνωρίζει ότι κάθε παιδί είναι διατεθειμένο να διανύσει απόσταση μικρότερη ή ίση του K για να αγοράσει παγωτό. Έτσι θέλει να εγκαταστήσει το κιόσκι του στο σημείο όπου θα μπορεί να εξυπηρετήσει όσο το δυνατόν περισσότερα παιδιά.\nΝα γράψετε ένα πρόγραμμα που υπολογίζει το μέγιστο πλήθος παιδιών που μπορεί να εξυπηρετήσει ο παγωτατζής.\nΣημείωση: Η απόσταση δύο σημείων με συντεταγμένες x και y επί της οδού είναι ίση με |x - y|.',
	inputDescription: 'Στην πρώτη γραμμή της εισόδου θα δίνονται δύο θετικοί ακέραιοι, χωρισμένοι με ένα κενό διάστημα, που δηλώνουν το πλήθος Ν των παιδιών και την απόσταση Κ που μπορεί να διανύσει κάθε παιδί. Σε καθεμία από τις επόμενες N γραμμές θα δίνεται ένας ακέραιος a_i που δηλώνει τη συντεταγμένη του παιδιού i. Οι συντεταγμένες θα δίνονται σε αύξουσα σειρά.\nΝα θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι 1 <= Ν <= 1.000.000, 1 <= K <= 5.000.000, 0 <= a_i <= 40.000.000.',
	outputDescription: 'Το πρόγραμμά σας πρέπει να τυπώνει, στην πρώτη γραμμή της εξόδου μόνο έναν αριθμό: το μέγιστο πλήθος παιδιών που μπορεί να εξυπηρετήσει ο παγωτατζής.',
	input: ['6 2\n1\n2\n3\n4\n6\n7\n9', '9 4\n1\n2\n3\n4\n5\n6\n7\n8\n9'],
	output: ['4', '9'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=90',
	constraints: '⏱️: 1s 💻: 64MB',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});
map.set('dig23', {
	title: 'dig23',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει δύο φυσικούς αριθμούς Α και Β, να υπολογίζει το γινόμενό τους και να εκτυπώνει τα δύο προτελευταία ψηφία του.\nΓια παράδειγμα, αν Α=4217 και Β=1742, είναι Α*Β=7346014 και θα πρέπει να εκτυπώνονται τα δύο προτελευταία ψηφία: 01.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους αριθμούς A και B, χωρισμένους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι θα είναι έγκυροι φυσικοί αριθμοί μεταξύ των ορίων που αναφέρονται παρακάτω.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει δύο δεκαδικά ψηφία. Προσέξτε ότι το πρώτο από αυτά θα πρέπει να εκτυπώνεται ακόμη κι αν είναι μηδέν.',
	input: ['42 17', '29 37'],
	output: ['71', '07'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=99',
	constraints: '⏱️: 1s 💻: 4MB\n10 <= A < 10000\n10 <= B < 10000',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('max2sum', {
	title: 'max2sum',
	description: 'Δίνεται μία ακολουθία Ν θετικών ακέραιων αριθμών. Επιλέγω δύο από αυτούς και υπολογίζω το άθροισμά τους συν την απόστασή τους μέσα στην ακολουθία. Για παράδειγμα, έστω ότι Ν=6 και οι αριθμοί της ακολουθίας είναι:\n`7 3 9 8 2 7`\nΑν επιλέξω το 3 και το 8, η απόστασή τους είναι 2 (γιατί το 3 είναι ο δεύτερος όρος της ακολουθίας και το 8 είναι ο τέταρτος, επομένως 4-2=2), άρα το άθροισμα που υπολογίζω είναι 3+8+2=13.\nΓράψτε ένα πρόγραμμα που, δεδομένης μίας τέτοιας ακολουθίας, να βρίσκει τη μέγιστη δυνατή τιμή αυτού του αθροίσματος.\nΠροσοχή: Πρέπει να επιλέξω δύο διαφορετικούς όρους της ακολουθίας, όχι δύο φορές τον ίδιο όρο. Αυτό δεν αποκλείει να επιλεγεί ο ίδιος αριθμός, αν εμφανίζεται δύο φορές στην ακολουθία.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος N των στοιχείων της ακολουθίας. Η δεύτερη γραμμή της εισόδου θα περιέχει Ν ακέραιους αριθμούς, χωρισμένους ανά δύο με ένα κενό διάστημα.\nΝα θεωρήσετε ως δεδομένο ότι 2 <= Ν <= 4.000.000, ότι η είσοδος θα είναι έγκυρη και ότι οι αριθμοί δε θα υπερβαίνουν το 1.000.000.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό, τη μεγαλύτερη δυνατή τιμή του ζητούμενου αθροίσματος.',
	input: '6\n7 3 9 8 2 7',
	output: '19',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=100',
	constraints: '⏱️: 1s 💻: 10MB\n2 <= Ν <= 4.000.000',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('sum2dig', {
	title: 'sum2dig',
	description: 'Να γράψετε ένα πρόγραμμα που να διαβάζει έναν φυσικό αριθμό N >= 10 και να εκτυπώνει το άθροισμα των δύο τελευταίων ψηφίων του.\nΓια παράδειγμα, αν N=4217, θα πρέπει να εκτυπώνεται ο αριθμός 8 (γιατί 1+7=8).',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό Ν. Θεωρήστε δεδομένο ότι θα είναι έγκυρος φυσικός αριθμός μεταξύ των ορίων που αναφέρονται παρακάτω.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει μόνο έναν ακέραιο αριθμό: το ζητούμενο άθροισμα.',
	input: ['4217', '12345678'],
	output: ['8', '15'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=101',
	constraints: '⏱️: 1s 💻: 10MB\n10 <= Ν <= 1.000.000',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('mulsum', {
	title: 'mulsum',
	description: 'Δίνεται μία ακολουθία Ν φυσικών αριθμών και ένας θετικός φυσικός αριθμός Μ. Ζητείται το μέγιστο πολλαπλάσιο του M που μπορεί να προκύψει ως άθροισμα (οσωνδήποτε) διαδοχικών όρων της ακολουθίας.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει ακριβώς δύο φυσικούς αριθμούς χωρισμένους μεταξύ τους με ένα κενό διάστημα: το πλήθος N των στοιχείων της ακολουθίας και τον αριθμό Μ. Η δεύτερη γραμμή της εισόδου θα περιέχει Ν ακέραιους αριθμούς, χωρισμένους ανά δύο με ένα κενό διάστημα.\nΝα θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι οι αριθμοί Ν και Μ δε θα υπερβαίνουν τα παρακάτω όρια. Επίσης, το άθροισμα όλων των όρων της ακολουθίας δε θα υπερβαίνει το 1.000.000.000.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό, το ζητούμενο πολλαπλάσιο.',
	input: ['8 7\n1 2 3 4 5 6 7 8', '5 17\n6 4 3 7 1'],
	output: ['35', '0'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=102',
	constraints: '⏱️: 1s 💻: 16MB\n1 <= Ν <= 1.000.000\n1 <= Μ <=1.000.000',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});
map.set('evnumdig', {
	title: 'evnumdig',
	description: 'Γράψτε ένα πρόγραμμα που να διαβάζει ένα φυσικό αριθμό και να βρίσκει αν αυτός έχει άρτιο (ζυγό) πλήθος ψηφίων.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό N. Θεωρήστε δεδομένο ότι θα είναι έγκυρος φυσικός αριθμός μεταξύ των ορίων που αναφέρονται παρακάτω.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει τη λέξη "yes", αν ο αριθμός Ν έχει άρτιο πλήθος ψηφίων, διαφορετικά τη λέξη "no".',
	input: ['42', '31313'],
	output: ['yes', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=113',
	constraints: '⏱️: 1s 💻: 16MB\n0 <= N < 100000',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('cb3', {
	title: 'cb3',
	description: 'Κάποιοι φυσικοί αριθμοί, όπως ο 17, μπορούν να γραφούν ως άθροισμα τριών κύβων φυσικών αριθμών: 17 = 1^3 + 2^3 + 2^3. Άλλοι, όπως ο 42, δεν μπορούν να γραφούν σε αυτή τη μορφή. Κάποιοι φυσικοί αριθμοί, όπως ο 251, μπορούν να γραφούν σε αυτή τη μορφή με περισσότερους του ενός τρόπους: 251 = 1^3 + 5^3 + 5^3 = 2^3 + 3^3 + 6^3.\nΓράψτε ένα πρόγραμμα που να διαβάζει κάποιους φυσικούς αριθμούς και να βρίσκει με πόσους διαφορετικούς τρόπους καθένας από αυτούς μπορεί να γραφεί ως άθροισμα τριών κύβων φυσικών αριθμών.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει το πλήθος T των αριθμών που θα δοθούν στη συνέχεια. Οι επόμενες T γραμμές θα περιέχουν κάθε μία ακριβώς ένα φυσικό αριθμό N_i.\nΝα θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι οι αριθμοί δε θα υπερβαίνουν τα όρια που αναγράφονται παρακάτω.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από T γραμμές, κάθε μία από τις οποίες πρέπει να περιέχει ακριβώς έναν ακέραιο αριθμό, το πλήθος των τρόπων με τους οποίους ο αντίστοιχος αριθμός N_i της εισόδου μπορεί να γραφεί ως άθροισμα τριών κύβων φυσικών αριθμών.',
	input: '6\n17\n42\n251\n0\n5103\n1003',
	output: '1\n0\n2\n1\n3\n0',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=114',
	constraints: '⏱️: 1s 💻: 64MB\n1 <= T <= 10.000\n0 <= N_i < 1.000.000.000',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('div1742', {
	title: 'div1742',
	description: 'Γράψτε ένα πρόγραμμα που να διαβάζει δύο φυσικούς αριθμούς, Α και Β, και να βρίσκει αν ο ένας από τους δύο διαιρείται με το 17 και συγχρόνως ο άλλος διαιρείται με το 42',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τους δύο αριθμούς Α και Β, χωρισμένους μεταξύ τους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι θα είναι έγκυροι φυσικοί αριθμοί μεταξύ των ορίων που αναφέρονται παρακάτω.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει τη λέξη "yes", αν ένας από τους δύο αριθμούς διαιρείται με το 17 και ο άλλος με το 42, διαφορετικά τη λέξη "no".',
	input: ['210 34', '1717 4224'],
	output: ['yes', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=115',
	constraints: '⏱️: 1s 💻: 16MB\n0 <= Α, Β < 1.000.000',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('elev2', {
	title: 'elev2',
	description: 'Ένας ανελκυστήρας χωράει το πολύ δύο άτομα μέγιστου βάρους B κιλών (και οι δύο μαζί). Στο ισόγειο, περιμένουν N άτομα να χρησιμοποιήσουν τον ανελκυστήρα για να ανέβουν στον τελευταίο όροφο. Ευτυχώς, γνωρίζουμε τα βάρη W_i όλων τους.\nΓράψτε ένα πρόγραμμα που να διαβάζει αυτά τα δεδομένα και να βρίσκει το ελάχιστο πλήθος διαδρομών που πρέπει να κάνει ο ανελκυστήρας, για να μεταφερθούν όλα τα άτομα.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει δύο ακέραιους αριθμούς N και B, χωρισμένους μεταξύ τους με ένα κενό διάστημα. Οι επόμενες N γραμμές θα περιέχουν κάθε μία ακριβώς έναν ακέραιο αριθμό W_i, το βάρος του αντίστοιχου ατόμου.\nΝα θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι οι αριθμοί δε θα υπερβαίνουν τα όρια που αναγράφονται παρακάτω.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από ακριβώς μία γραμμή που να περιέχει ακριβώς έναν ακέραιο αριθμό, το ελάχιστο πλήθος διαδρομών που πρέπει να κάνει ο ανελκυστήρας.',
	input: '10 150\n114\n57\n67\n70\n93\n99\n92\n114\n45\n90',
	output: '7',
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=116',
	constraints: '⏱️: 1s 💻: 64MB\n1 <= N <= 1.000.000\n1 <= B <= 1.000.000\n1 <= W_i <= B',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});
map.set('fldigit', {
	title: 'fldigit',
	description: 'Γράψτε ένα πρόγραμμα που να διαβάζει έναν εξαψήφιο φυσικό αριθμό N και ένα ψηφίο D, και να βρίσκει αν το πρώτο και το τελευταίο ψηφίο του N είναι ίσα με D.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό N και το ψηφίο D, χωρισμένα μεταξύ τους με ένα κενό διάστημα. Θεωρήστε δεδομένο ότι θα είναι έγκυροι φυσικοί αριθμοί μεταξύ των ορίων που αναφέρονται παρακάτω.',
	outputDescription: 'Μόνο μία γραμμή που θα περιέχει τη λέξη "yes", αν το πρώτο και το τελευταίο ψηφίο του αριθμού N είναι και τα δύο D, διαφορετικά τη λέξη "no".',
	input: ['421704 4', '174207 8'],
	output: ['yes', 'no'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=117',
	constraints: '⏱️: 1s 💻: 16MB\n100.000 <= N <= 999.999\n0 <= D <= 9',
	difficulty: 'Εύκολο',
	difficultyGrade: '3',
});
map.set('share', {
	title: 'share',
	description: 'Συχνά θέλουμε να μοιράσουμε αντικείμενα με δίκαιο τρόπο. Ένα κριτήριο δικαιοσύνης είναι να ελαχιστοποιήσουμε την αξία των αντικειμένων που θα πάρει ο πιο ευνοημένος από την μοιρασιά.\nΈχουμε λοιπόν μια ακολουθία από Ν κουπόνια αξίας V_1, V_2, ..., V_Ν και θέλουμε να τη χωρίσουμε σε τρία τμήματα ώστε η συνολική αξία των κουπονιών στο καλύτερο τμήμα (δηλ. στο τμήμα με την μεγαλύτερη συνολική αξία) να είναι η μικρότερη δυνατή. Ο χωρισμός πρέπει να γίνει χωρίς αναδιάταξη των κουπονιών, τα τμήματα πρέπει να περιέχουν διαδοχικά κουπόνια, και κάθε κουπόνι πρέπει να ανήκει σε ένα ακριβώς τμήμα.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει έναν φυσικό αριθμό Ν, το πλήθος των κουπονιών. Οι επόμενες N γραμμές θα περιέχουν κάθε μία ακριβώς έναν φυσικό αριθμό V_i, την αξία του αντίστοιχου κουπονιού.\nΝα θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι οι αριθμοί δε θα υπερβαίνουν τα όρια που αναγράφονται παρακάτω.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από ακριβώς μία γραμμή που να περιέχει ακριβώς έναν φυσικό αριθμό, την ελάχιστη συνολική αξία κουπονιών που μπορεί να πάρει το καλύτερο τμήμα.',
	input: ['8\n5\n6\n1\n4\n9\n3\n1\n2', '10\n1\n1\n8\n1\n1\n3\n4\n9\n5\n2'],
	output: ['13', '15'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=118',
	constraints: '⏱️: 1s 💻: 64MB\n3 <= N <= 1.000.000\n1 <= V_i <= 100.000.000\n1 <= Σ V_i <= 1.000.000.000',
	difficulty: 'Δύσκολο',
	difficultyGrade: '3',
});
map.set('divpow2', {
	title: 'divpow2',
	description: 'Γράψτε ένα πρόγραμμα που διαβάζει έναν φυσικό αριθμό Ν και τυπώνει την μεγαλύτερη δύναμη του 2 που διαιρεί το Ν.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό N. Να θεωρήσετε δεδομένο ότι θα είναι έγκυρος φυσικός αριθμός μεταξύ των ορίων που αναφέρονται παρακάτω.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από ακριβώς μία γραμμή που θα περιέχει ακριβώς έναν ακέραιο αριθμό, την μεγαλύτερη δύναμη του 2 που διαιρεί το Ν. ',
	input: ['32', '2016', '99999'],
	output: ['5', '5', '0'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=128',
	constraints: '⏱️: 1s\n1 <= Ν <= 10.000.000',
	difficulty: 'Εύκολο',
	difficultyGrade: '1',
});
map.set('sumint', {
	title: 'sumint',
	description: 'Δίνονται μια ακολουθία a_1, ..., a_N αποτελούμενη από N θετικούς ακέραιους και ένας θετικός ακέραιος Κ. Ζητείται να υπολογίσουμε το πλήθος των διαστημάτων a_i, ..., a_j της ακολουθίας, με 1<=i<=j<=N, για τα οποία το άθροισμα των όρων δεν ξεπερνά το K, δηλ. έχουμε ότι \\sum_{p=i}^j a_p <= K.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει τους ακέραιους αριθμούς N και Κ, χωρισμένους μεταξύ τους με ένα κενό διάστημα. Η δεύτερη γραμμή της εισόδου θα περιέχει τους Ν όρους της ακολουθίας, χωρισμένους ανά δύο με ένα κενό διάστημα. Να θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι οι αριθμοί δε θα υπερβαίνουν τα όρια που αναγράφονται παρακάτω.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από ακριβώς μία γραμμή που θα περιέχει ακριβώς έναν ακέραιο αριθμό, το πλήθος των διαστημάτων a_i, ..., a_j, με 1<=i<=j<=N, για τα οποία \\sum_{p=i}^j a_p <= K.\\nΕπειδή για μεγάλες τιμές του Ν μπορεί να υπάρχουν περισσότερα από 2^32 τέτοια διαστήματα, είναι σημαντικό να χρησιμοποιήσετε μια μεταβλητή τύπου long long int για να αποθηκεύσετε το πλήθος αυτών των διαστημάτων. Για να τυπώσετε μια τέτοια μεταβλητή (ας πούμε την long long int res, μπορείτε να χρησιμοποιήσετε WRITELN(res) ή printf("%lld\\n", res).',
	input: ['8 10\n1 2 1 1 5 10 2 3', '10 10\n1 1 1 1 1 1 1 1 1 1'],
	output: ['19', '55'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=129',
	constraints: '⏱️: 1s 💻: 64MB\n2 <= Ν <= 2.000.000\n1 <= a_i <= 1.000.000\n1 <= \\sum_{i=1}^N a_i <= 1.000.000.000\n1 <= Κ <= 50.000.000',
	difficulty: 'Δύσκολο',
	difficultyGrade: '1',
});
map.set('dsum', {
	title: 'dsum',
	description: 'Γράψτε ένα πρόγραμμα που διαβάζει έναν φυσικό αριθμό Ν και υπολογίζει το άθροισμα των ψηφίων του.',
	inputDescription: 'Μόνο μία γραμμή που θα περιέχει τον αριθμό N. Να θεωρήσετε δεδομένο ότι θα είναι έγκυρος φυσικός αριθμός μεταξύ των ορίων που αναφέρονται παρακάτω.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από ακριβώς μία γραμμή που θα περιέχει ακριβώς έναν ακέραιο αριθμό, το άθροισμα των ψηφίων του Ν.',
	input: ['32', '2016', '99999'],
	output: ['5', '9', '45'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=130',
	constraints: '⏱️: 1s\n1 <= Ν <= 10.000.000',
	difficulty: 'Εύκολο',
	difficultyGrade: '2',
});
map.set('shops', {
	title: 'shops',
	description: 'Μια επιχείρηση πρόκειται να ανοίξει δύο καταστήματα σε έναν μεγάλο εμπορικό δρόμο. Ο δρόμος αποτελείται από N τετράγωνα και κάθε τετράγωνο i αποφέρει στην επιχείρηση κέδρος a_i (όπου a_i ένας θετικός ακέραιος), εφόσον το τετράγωνο i καλυφθεί από κάποιο κατάστημα. Κάθε κατάστημα καλύπτει K διαδοχικά τετράγωνα. Aν ένα τετράγωνο i καλύπτεται και από τα δύο καταστήματα, το κέρδος που αποφέρει στην επιχείρηση παραμένει a_i. Ζητείται να υπολογίσουμε το μέγιστο κέρδος που μπορεί να έχει η εταιρεία ανοίγοντας δύο καταστήματα που καλύπτουν Κ διαδοχικά τετράγωνα το καθένα.',
	inputDescription: 'Η πρώτη γραμμή της εισόδου θα περιέχει τους ακέραιους αριθμούς Ν και Κ χωρισμένους με ένα κενό διάστημα. Η δεύτερη γραμμή της εισόδου θα περιέχει Ν ακεραίους αριθμούς, που αντιστοιχούν στο κέρδος της εταιρείας από κάθε τετράγωνο, χωρισμένους ανά δύο με ένα κενό διάστημα. Να θεωρήσετε ως δεδομένο ότι η είσοδος θα είναι έγκυρη και ότι οι αριθμοί δε θα υπερβαίνουν τα όρια που αναγράφονται παρακάτω.',
	outputDescription: 'Η έξοδος πρέπει να αποτελείται από ακριβώς μία γραμμή που θα περιέχει ακριβώς έναν ακέραιο αριθμό, το μέγιστο κέρδος θα έχει η εταιρεία ανοίγοντας δύο καταστήματα που καλύπτουν Κ διαδοχικά τετράγωνα το καθένα.',
	input: ['10 3\n2 4 15 12 10 1 1 20 4 10', '10 3\n1 5 20 20 20 15 10 1 1 1'],
	output: ['71', '90'],
	url: 'http://grader.softlab.ntua.gr/?page=problem&id=131',
	constraints: '⏱️: 1s 💻: 64MB\n3 <= Ν <= 2.000.000\n1 <= Κ <= N/2\n1 <= a_i <= 1.000.000\\n1 <= \\sum_{i=1}^N a_i <= 1.000.000.000',
	difficulty: 'Δύσκολο',
	difficultyGrade: '2',
});

module.exports = map;